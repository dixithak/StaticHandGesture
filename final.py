# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3ZshExE4zb2n88kE757a4dQd3s05DyK
"""

import numpy as np
import keras
import os
from keras.models import load_model
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Activation
from keras.layers import Conv2D, MaxPooling2D
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from PIL import Image
import os
IMG_SHAPE = (64,64,1)
from google.colab import drive, files
drive.mount('/content/drive/')
path = "/content/drive/My Drive/dataset_fixed/"

X = np.load("/content/drive/My Drive/dataset_fixed/dataset_fixed/X.npy")
Y = np.load("/content/drive/My Drive/dataset_fixed/dataset_fixed/Y.npy")

print("Available images :", X.shape[0])

x_train, x_test, y_train, y_test = train_test_split(X,Y, test_size = .33,shuffle="TRUE")

x_train =  x_train.reshape(-1,64,64,1)
x_test =  x_test.reshape(-1,64,64,1)

print("x_train shape:", x_train.shape)
print("x_test shape:", x_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

batch_size = 128
epoch = 20
input_size = (64,64,1)
number_classes = 10

cnn = Sequential()

cnn.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=input_size))
cnn.add(MaxPooling2D((2, 2)))
cnn.add(Dropout(0.25))

cnn.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
cnn.add(MaxPooling2D(pool_size=(2, 2)))
cnn.add(Dropout(0.25))

cnn.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))
cnn.add(Dropout(0.4))

cnn.add(Flatten())

cnn.add(Dense(128, activation='relu'))
cnn.add(Dense(128, activation='relu'))
cnn.add(Dropout(0.3))
cnn.add(Dense(10, activation='softmax'))

cnn.compile(loss = keras.losses.categorical_crossentropy,
             optimizer = keras.optimizers.Adadelta(),
             metrics = ["accuracy"])
cnn.fit(x_train,y_train,
         batch_size = batch_size,
         epochs = epoch,
         verbose = 1,
         validation_data = (x_test,y_test))

score = cnn.evaluate(x_test, y_test, verbose = 0)
#print("Probability of Loss: ", score[0])
print("Probability of Accuracy: ", score[1])

cnn.save("/content/drive/My Drive/final1_model.h5")

m_test = load_model("/content/drive/My Drive/final1_model.h5")

classes = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

i = 126
plt.imshow(x_test[i].reshape(64,64), cmap = "gray")
y_test[i]
print(x_test[i].shape)

test1 = x_test[i].reshape(-1,64,64,1)
pre1 = cnn.predict(test1 ,batch_size = 1)
print("Test Cases--")
print("Prediction: ",np.round(pre1,0))
print("Number: ",classes[np.argmax(pre1)])

from PIL import Image
test="/content/drive/My Drive/testing/"
test_dir="/content/drive/My Drive/testing/hands.jpg"
def invert(pixel): 
    return -pixel + 256
sample_img=Image.open(test_dir)
sample_img=sample_img.resize((64,64))
sample_img=sample_img.convert(mode='L')
plt.imshow(sample_img)
sample_img = sample_img.point(invert)
sample_img=np.array(sample_img)/255
sample_img=sample_img.reshape((1,64,64))
print(sample_img)

test = sample_img.reshape(-1,64,64,1)
pre = cnn.predict(test, batch_size = 1)

print("User example--")
print("Prediction: ", np.round(pre, 0))
print("Number: ",classes[np.argmax(pre)])